requires "edsl.md"

module ERC20-CONTRACT
    imports public EDSL
    
    syntax Contract ::= ERC20Contract
    
    syntax ERC20Contract ::= "ERC20" [symbol(), klabel(contract_ERC20)]
    
    rule  ( #binRuntime ( ERC20 ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610aec565b60405180910390f35b6100e660048036038101906100e19190610ba7565b610308565b6040516100f39190610c02565b60405180910390f35b61010461032b565b6040516101119190610c2c565b60405180910390f35b610134600480360381019061012f9190610c47565b610335565b6040516101419190610c02565b60405180910390f35b610152610364565b60405161015f9190610cb6565b60405180910390f35b610182600480360381019061017d9190610ba7565b61036d565b60405161018f9190610c02565b60405180910390f35b6101b260048036038101906101ad9190610cd1565b6103a4565b6040516101bf9190610c2c565b60405180910390f35b6101d06103ec565b6040516101dd9190610aec565b60405180910390f35b61020060048036038101906101fb9190610ba7565b61047e565b60405161020d9190610c02565b60405180910390f35b610230600480360381019061022b9190610ba7565b6104f5565b60405161023d9190610c02565b60405180910390f35b610260600480360381019061025b9190610cfe565b610518565b60405161026d9190610c2c565b60405180910390f35b60606003805461028590610d6d565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d6d565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b60008061031361059f565b90506103208185856105a7565b600191505092915050565b6000600254905090565b60008061034061059f565b905061034d858285610770565b6103588585856107fc565b60019150509392505050565b60006012905090565b60008061037861059f565b905061039981858561038a8589610518565b6103949190610dcd565b6105a7565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103fb90610d6d565b80601f016020809104026020016040519081016040528092919081815260200182805461042790610d6d565b80156104745780601f1061044957610100808354040283529160200191610474565b820191906000526020600020905b81548152906001019060200180831161045757829003601f168201915b5050505050905090565b60008061048961059f565b905060006104978286610518565b9050838110156104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390610e73565b60405180910390fd5b6104e982868684036105a7565b60019250505092915050565b60008061050061059f565b905061050d8185856107fc565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060d90610f05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610685576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067c90610f97565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107639190610c2c565b60405180910390a3505050565b600061077c8484610518565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146107f657818110156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90611003565b60405180910390fd5b6107f584848484036105a7565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290611095565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d190611127565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610960576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610957906111b9565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a4e9190610c2c565b60405180910390a350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a96578082015181840152602081019050610a7b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610abe82610a5c565b610ac88185610a67565b9350610ad8818560208601610a78565b610ae181610aa2565b840191505092915050565b60006020820190508181036000830152610b068184610ab3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3e82610b13565b9050919050565b610b4e81610b33565b8114610b5957600080fd5b50565b600081359050610b6b81610b45565b92915050565b6000819050919050565b610b8481610b71565b8114610b8f57600080fd5b50565b600081359050610ba181610b7b565b92915050565b60008060408385031215610bbe57610bbd610b0e565b5b6000610bcc85828601610b5c565b9250506020610bdd85828601610b92565b9150509250929050565b60008115159050919050565b610bfc81610be7565b82525050565b6000602082019050610c176000830184610bf3565b92915050565b610c2681610b71565b82525050565b6000602082019050610c416000830184610c1d565b92915050565b600080600060608486031215610c6057610c5f610b0e565b5b6000610c6e86828701610b5c565b9350506020610c7f86828701610b5c565b9250506040610c9086828701610b92565b9150509250925092565b600060ff82169050919050565b610cb081610c9a565b82525050565b6000602082019050610ccb6000830184610ca7565b92915050565b600060208284031215610ce757610ce6610b0e565b5b6000610cf584828501610b5c565b91505092915050565b60008060408385031215610d1557610d14610b0e565b5b6000610d2385828601610b5c565b9250506020610d3485828601610b5c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d8557607f821691505b602082108103610d9857610d97610d3e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dd882610b71565b9150610de383610b71565b9250828201905080821115610dfb57610dfa610d9e565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610e5d602583610a67565b9150610e6882610e01565b604082019050919050565b60006020820190508181036000830152610e8c81610e50565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610eef602483610a67565b9150610efa82610e93565b604082019050919050565b60006020820190508181036000830152610f1e81610ee2565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610f81602283610a67565b9150610f8c82610f25565b604082019050919050565b60006020820190508181036000830152610fb081610f74565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000610fed601d83610a67565b9150610ff882610fb7565b602082019050919050565b6000602082019050818103600083015261101c81610fe0565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061107f602583610a67565b915061108a82611023565b604082019050919050565b600060208201905081810360008301526110ae81611072565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611111602383610a67565b915061111c826110b5565b604082019050919050565b6000602082019050818103600083015261114081611104565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006111a3602683610a67565b91506111ae82611147565b604082019050919050565b600060208201905081810360008301526111d281611196565b905091905056fea2646970667358221220191fa9c4b5faa684ec5eb2d9b1a9f89ca96b8f30182521602033cc57ad03d8b164736f6c63430008130033" ) )
      
    
    syntax Field ::= ERC20Field
    
    syntax ERC20Field ::= "_balances" [symbol(), klabel(field_ERC20__balances)]
    
    syntax ERC20Field ::= "_allowances" [symbol(), klabel(field_ERC20__allowances)]
    
    syntax ERC20Field ::= "_totalSupply" [symbol(), klabel(field_ERC20__totalSupply)]
    
    syntax ERC20Field ::= "_name" [symbol(), klabel(field_ERC20__name)]
    
    syntax ERC20Field ::= "_symbol" [symbol(), klabel(field_ERC20__symbol)]
    
    rule  ( #loc ( ERC20 . _balances ) => 0 )
      
    
    rule  ( #loc ( ERC20 . _allowances ) => 1 )
      
    
    rule  ( #loc ( ERC20 . _totalSupply ) => 2 )
      
    
    rule  ( #loc ( ERC20 . _name ) => 3 )
      
    
    rule  ( #loc ( ERC20 . _symbol ) => 4 )
      
    
    syntax Bytes ::= ERC20Contract "." ERC20Method [function(), symbol(), klabel(method_ERC20)]
    
    syntax ERC20Method ::= "allowance" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_ERC20_allowance_address_address)]
    
    syntax ERC20Method ::= "approve" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_ERC20_approve_address_uint256)]
    
    syntax ERC20Method ::= "balanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_ERC20_balanceOf_address)]
    
    syntax ERC20Method ::= "decimals" "(" ")" [symbol(), klabel(method_ERC20_decimals_)]
    
    syntax ERC20Method ::= "decreaseAllowance" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_ERC20_decreaseAllowance_address_uint256)]
    
    syntax ERC20Method ::= "increaseAllowance" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_ERC20_increaseAllowance_address_uint256)]
    
    syntax ERC20Method ::= "name" "(" ")" [symbol(), klabel(method_ERC20_name_)]
    
    syntax ERC20Method ::= "symbol" "(" ")" [symbol(), klabel(method_ERC20_symbol_)]
    
    syntax ERC20Method ::= "totalSupply" "(" ")" [symbol(), klabel(method_ERC20_totalSupply_)]
    
    syntax ERC20Method ::= "transfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_ERC20_transfer_address_uint256)]
    
    syntax ERC20Method ::= "transferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_ERC20_transferFrom_address_address_uint256)]
    
    rule  ( ERC20 . allowance ( V0_owner : address , V1_spender : address ) => #abiCallData ( "allowance" , #address ( V0_owner ) , #address ( V1_spender ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_owner )
       andBool ( #rangeAddress ( V1_spender )
               ))
      
    
    rule  ( ERC20 . approve ( V0_spender : address , V1_amount : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( ERC20 . balanceOf ( V0_account : address ) => #abiCallData ( "balanceOf" , #address ( V0_account ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_account )
      
    
    rule  ( ERC20 . decimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( ERC20 . decreaseAllowance ( V0_spender : address , V1_subtractedValue : uint256 ) => #abiCallData ( "decreaseAllowance" , #address ( V0_spender ) , #uint256 ( V1_subtractedValue ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_subtractedValue )
               ))
      
    
    rule  ( ERC20 . increaseAllowance ( V0_spender : address , V1_addedValue : uint256 ) => #abiCallData ( "increaseAllowance" , #address ( V0_spender ) , #uint256 ( V1_addedValue ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_addedValue )
               ))
      
    
    rule  ( ERC20 . name ( ) => #abiCallData ( "name" , .TypedArgs ) )
      
    
    rule  ( ERC20 . symbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( ERC20 . totalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( ERC20 . transfer ( V0_to : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_to ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_to )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( ERC20 . transferFrom ( V0_from : address , V1_to : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_from ) , #address ( V1_to ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_from )
       andBool ( #rangeAddress ( V1_to )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "allowance(address,address)" ) => 3714247998 )
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "decreaseAllowance(address,uint256)" ) => 2757214935 )
      
    
    rule  ( selector ( "increaseAllowance(address,uint256)" ) => 961581905 )
      
    
    rule  ( selector ( "name()" ) => 117300739 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module ERC20-VERIFICATION
    imports public ERC20-CONTRACT
    
    

endmodule

